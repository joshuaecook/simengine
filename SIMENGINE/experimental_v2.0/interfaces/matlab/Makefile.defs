# Import subsystem rules.

SUBSYSTEMS := $(D)/dsl_gen
$(eval $(call IMPORT_SUBSYSTEMS,$(SUBSYSTEMS)))

# Define local variables.

CLASSES_$(D)	:= $(addprefix $(D)/,$(addsuffix .m,simEngineUpdate simCheckLicense simexamplepath simplot simCheckVersion))
ADD_CLASSES_$(D):= $(addprefix $(D)/,$(addsuffix .m,piecewise neighbors combinations))
HELP_$(D)	:= $(addprefix $(D)/,$(addsuffix _info.m,simEngineUpdate simCheckLicense simexamplepath simplot simCheckVersion simex))
PCODE_$(D)	:= $(addsuffix .p,$(basename $(CLASSES_$(D)))) $(D)/simex.p $(D)/parse_json.p

TARGETS_$(D)	:= $(PCODE_$(D)) $(addprefix $(D)/,Contents.m $(addprefix src/,$(addprefix readSimulationData,$(MEXEXT)) $(addprefix mexDataStore,$(MEXEXT)) PrintDataStore))
TARGETS		:= $(TARGETS) $(TARGETS_$(D))
INSTALLS	:= $(INSTALLS) $(D)/installs
CLEAN		:= $(CLEAN) $(TARGETS_$(D)) $(addprefix $(D)/src/,$(addprefix readSimulationData,$(ALL_MEXEXT)) $(addprefix mexDataStore,$(ALL_MEXEXT)) DataStore.pb.cc DataStore.pb.h)
CLEAN_ALL	:= $(CLEAN_ALL) $(D)/simex.m

define CONTENTS_M
% SIMATRA simEngine\n\
% Version $(VERSION)\n\
% \n\
% simEngine, the Dynamical System Compiler Toolbox by Simatra for MATLAB(TM)\n\
% \n\
% simEngine model construction\n\
%   Model           - Create simEngine models programmatically in MATLAB\n\
%   Iterator        - Create iterator objects used in Model generation\n\
% \n\
% simEngine functions\n\
%   simex           - Compile and simulate DIESEL source files using simEngine\n\
%   simplot         - Plotting utility to visualize the output of simEngine simulations\n\
%   simexamplepath  - Returns the path for examples and demo files\n\
% \n\
% simEngine utility functions\n\
%   simCheckVersion - Queries the Simatra servers for a new version of simEngine\n\
%   simCheckLicense - Reports on current license, or installs a new license for simEngine\n\
%   simEngineUpdate - Auto-updates the simEngine installation to the latest available version\n\
% \n\
%  For more information, see http://www.simatratechnologies.com.\n\
% \n\
%  Copyright 2010 Simatra Modeling Technologies
endef

# Define local rules.

$(D)/simex.m: $(D)/simex/simex.m $(filter-out %simex.m,$(wildcard $(D)/simex/*.m))
	cat $^ > $@

$(D)/Contents.m: VERSION = $(MAJOR_VERSION).$(MINOR_VERSION) $(if $(VERSION_REVISION),($(VERSION_REVISION)) ,)$(BUILD_DATE_MATLAB)
$(D)/Contents.m: $(D)/Makefile.defs
	$(info Generating $@)
	@echo "$(CONTENTS_M)" > $@

define mexDataStore_template
$$(D)/src/mexDataStore$(1): MEXFLAGS := -I. -Ishare/protobuf/include
$$(D)/src/mexDataStore$(1): $$(D)/src/mexDataStore.cpp $$(D)/src/DataStore.pb.cc share/protobuf/lib/libprotobuf.a
	$$(COMPILE.mexXX) -output "$$*" $$^
endef

$(foreach ext,$(ALL_MEXEXT),$(eval $(call mexDataStore_template,$(ext))))

$(D)/src/PrintDataStore: LIBDIR := share/protobuf/lib
$(D)/src/PrintDataStore: INCDIR := share/protobuf/include
$(D)/src/PrintDataStore: $(addprefix $D/src/,PrintDataStore.cpp DataStore.pb.cc)
	$(CXX) -o $@ $^ -I. -I$(INCDIR) -L$(LIBDIR) -lprotobuf -lpthread

$(D)/installs: CLASSES := $(PCODE_$(D)) $(ADD_CLASSES_$(D)) 
$(D)/installs: HELP := $(HELP_$(D)) $(addprefix $(D)/,Contents.m)
$(D)/installs: MEXES := $(addprefix $(D)/src/,$(addprefix readSimulationData,$(MEXEXT)) $(addprefix mexDataStore,$(MEXEXT)))
$(D)/installs: DIR := $(D)
$(D)/installs: $(TARGETS_$(D)) $(ADD_CLASSES_$(D)) $(HELP_$(D))
	$(INSTALL) $(foreach help,$(HELP),-C $(help) -T $(subst _info,,$(subst $(DIR),$(INSTALL_PREFIX),$(help))))
	$(INSTALL) -C $(CLASSES) $(MEXES) -d $(INSTALL_PREFIX)
