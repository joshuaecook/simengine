fun callfun (name, args) =
    Ast.APPLY {func=(Ast.SYMBOL (Symbol.symbol name)),
	       args=Ast.TUPLE args}


fun warning (string) =
    Logger.log_warning (Printer.$ string)

fun error (string) =
    (Logger.log_error (Printer.$ string);
     DynException.setErrored())

fun error_at_pos pos (string) =
    (Logger.log_error_with_position [pos] (Printer.$ string);
     DynException.setErrored())

exception StubbedOut

%%


(* The list of terminals corresponding to LC syntactic atoms. *)
%term
    EOF 
  | ID of string
  | PATTERN of string
  | STRING_CHARS of string
  | INT of int 
  | REAL of real 
  | HEX of int * IntInf.int
  | OCT of int * IntInf.int
  | BIN of int * IntInf.int
  | BEGIN_STRING | END_STRING | STRING_EXP
  | TICK | PERIOD | GT | LT | EQ | ASSIGN | LPAREN | RPAREN | STAR | AND | AMPERSAND | ARROW | EQARROW | UNDERSCORE | PLUS | MINUS | UMINUS | SLASH | CARROT | LCBRACE | RCBRACE | ELLIPSIS | GEQUAL | NEQ | LEQUAL
  | LAMBDAFUN | COMMA | IN | END | LF | LBRACE | RBRACE | UNDERBRACE | PERCENT | DOLLAR | AT | WHEN | OTHERWISE | UNDEFINED
  | ASSERT | OR | IF | THEN | ELSE | TRUE | FALSE | ERROR | ELSEIF
  | IMPORT | CLASS | OF | COLON | TO | BY | WITH | STATEFUL | TUNABLE | VISIBLE | OUTPUT | INPUT | MODEL | SUBMODEL | PARAMETER | STATE | RANDOM | HIDDEN | PUBLIC
  | WHILE | FOREACH | DO | VAR | ITERATOR | CONSTANT | GLOBAL | FUNCTION | OPERATOR | CONSTRUCTOR | NEWLINE | SATISFIES | EXTENDS | INTERFACE | NAMESPACE | REPLACE | OVERLOAD | OPEN | TYPE | ENUMERATION | EQUATION | EQUATIONS | QUANTITY | FORALL | EXISTS | SUCHTHAT | PROPERTY | GET | SET | MULTIFUNCTION | LET | RULEMATCH | WHERE

%nonassoc IMPORT CLASS VAR CONSTANT GLOBAL CONSTRUCTOR OPERATOR FUNCTION MULTIFUNCTION SATISFIES EXTENDS INTERFACE NAMESPACE REPLACE OVERLOAD OPEN ENUMERATION QUANTITY PROPERTY GET SET
%left LAMBDAFUN TYPE
%right LET IN END WHILE FOREACH DO OF 
%left IF THEN ELSE ELSEIF
%nonassoc ASSIGN WHEN OTHERWISE TO BY WITH MODEL SUBMODEL PARAMETER STATE RANDOM HIDDEN PUBLIC EQARROW ITERATOR 
%left COMMA
%left EQUATION EQUATIONS RULEMATCH WHERE
%left OR 
%left AND AMPERSAND
%left FORALL EXISTS SUCHTHAT
%left LT GT LEQUAL GEQUAL
%nonassoc EQ NEQ ERROR 
%left ARROW 
%left ELLIPSIS COLON
%left PLUS MINUS
%left STAR SLASH PERCENT
%right CARROT
%left UMINUS
%right LPAREN LBRACE LCBRACE UNDERBRACE
%nonassoc STATEFUL TUNABLE VISIBLE OUTPUT INPUT
%left PERIOD
%left REAL INT ID TRUE FALSE NEWLINE UNDERSCORE UNDEFINED HEX BIN OCT TICK PATTERN DOLLAR AT
%left STRING_CHARS STRING_EXP
%right BEGIN_STRING END_STRING

(* The list of rules (non-terminals) used by the parser. *)
%nonterm
start of Ast.stm
| stm of Ast.stm
| namespacestm of Ast.visibility option * Ast.stm
| programmatic_stm of Ast.stm
| stms of Ast.stm list
| namespacestms of (Ast.visibility option * Ast.stm) list
| definition of Ast.definition
| vardef of Ast.definition
| optassignment of Ast.exp option
| optmapping of Ast.exp option
| action of Ast.action
| header of Ast.header
| returnheader of Ast.header 
| args of Ast.typedname list 
| optargs of Ast.typedname list
| optdims of Symbol.symbol list option
| optliteraldims of int list option
| optspace of Ast.space option
| spacedef of Ast.space
| intlist of int list
| modelarg of Symbol.symbol * Symbol.symbol list option
| modelargs of (Symbol.symbol * Symbol.symbol list option) list
| optmodelargs of (Symbol.symbol * Symbol.symbol list option) list 
| arg of Ast.typedname 
| opttyp of Ast.typepattern option
| typs of Ast.typepattern list
| typ of Ast.typepattern
| method of Ast.method
| methods of Ast.method list
| optvisibility of Ast.visibility option
| constructor of Ast.method
| inheritance of Ast.exp option
| interfaces of Symbol.symbol list
| interfaceheaders of Ast.interfaceheader list
| interfaceheader of Ast.interfaceheader
| runnablemod of Ast.runnable_modifier option
| classheader of {inheritance: Ast.exp option, interfaces: Symbol.symbol list}
| exp of Ast.exp
| lambda of Ast.exp 
| lambdaexp  of Ast.exp
| lambdalist of Ast.exp list
| lambdapattern of Ast.exp
| lambdapatternlist of Ast.exp list
| aexp of Ast.exp
| lambdaapp of Ast.exp
| conditions of Ast.exp
| idlist of Symbol.symbol list
| someidslist of Symbol.symbol list
| newlines of unit
| optlines of unit
| enumdef of Ast.definition
| optenumextend of Symbol.symbol option
| enumargs of (Symbol.symbol * int option) list
| enumarg of Symbol.symbol * int option
| ticks of int
| equation of Ast.equation
| equations of Ast.equation list
| equationsdef of Ast.action
| number of Ast.exp
| elsechain of Ast.stm list
| function of Ast.definition
| singlefunction of Ast.header * Ast.stm list
| multiplefunctions of (Ast.header * Ast.stm list) list

| modeldef of Ast.definition
| modelheader of Ast.modelheader
| modifier of Ast.simq_modifier
| modifiers of Ast.simq_modifier list
| paramdef of Ast.modelpart
| statedef of Ast.modelpart
| randomdef of Ast.modelpart
| temporary of Ast.modelpart
| modelpart of Ast.modelpart
| modelparts of Ast.modelpart list
| submodelinst of Ast.modelpart
| quantitytype of Ast.quantitytype
| quantitydef of Ast.modelpart
| outputdef of Ast.modelpart
| inputdef of Ast.modelpart
| iteratordef of Ast.modelpart
| optwhen of Ast.exp option
| forclause of {var: Symbol.symbol, collection: Ast.exp, condition: Ast.exp option}
| forgenerator of {var: Symbol.symbol, collection: Ast.exp, condition: Ast.exp option} list
| tableentries of (Symbol.symbol * Ast.exp) list
| tableentry of (Symbol.symbol * Ast.exp)
| opttable of Ast.exp option
| optdimensions of Symbol.symbol list option
| get of Ast.stm list 
| set of (Symbol.symbol * (Ast.stm list)) 
| optgetset of {read: Ast.stm list option, write: (Symbol.symbol * (Ast.stm list)) option}
| string of Ast.exp
| string_contents of Ast.exp list
| string_content of Ast.exp

(* Default values for tokens with values. *)

%value ID ("bogus")
%value STRING_CHARS ("")
%value PATTERN ("")
%value INT (1)
%value REAL (1.0)

%nodefault
%name DML
%pure
%verbose
%pos PosLog.pos
%eop EOF NEWLINE
%noshift EOF 
%start start
%header (functor DMLLrValsFun(structure Token: TOKEN))

%%

start: stm (stm)
     | (Ast.ACTION(Ast.EXP(Ast.SYMBOL (Symbol.symbol "###EMPTY")), defaultPos)) (* these are removed in ast translation *)

stm: programmatic_stm (programmatic_stm)



(*
programmatic_stm: definition (Ast.DEFINITION (definition, definitionleft))
		| vardef (Ast.DEFINITION (vardef, vardefleft))
		| action (Ast.ACTION (action, actionleft))
		| modeldef (Ast.DEFINITION(modeldef, modeldefleft))
		| enumdef (Ast.DEFINITION (enumdef, enumdefleft))
		| equationsdef (Ast.ACTION (equationsdef, equationsdefleft))
*)
programmatic_stm: action (Ast.ACTION (action, actionleft))
		| modeldef (Ast.DEFINITION(modeldef, modeldefleft))
		| equationsdef (Ast.ACTION (equationsdef, equationsdefleft))



modeldef: MODEL modelheader newlines modelparts END (Ast.DEFMODEL {header=modelheader, parts=modelparts}) 


modelheader: ID optmodelargs ({name=Symbol.symbol ID, args=optmodelargs, returns=NONE})
	   | LPAREN idlist RPAREN ASSIGN ID optmodelargs ({name=Symbol.symbol ID, args=optmodelargs, returns=SOME idlist})

optmodelargs: (nil)
       | LPAREN modelargs RPAREN (modelargs)

modelargs: (nil)
    | modelarg (modelarg :: nil)
    | modelarg COMMA modelargs (modelarg :: modelargs)

modelarg: ID optdims(Symbol.symbol ID, optdims)

optdims: (NONE)
      (* | LBRACE idlist RBRACE (SOME idlist) *)

(*
optliteraldims: (NONE)
	      | LBRACE intlist RBRACE (SOME intlist)
*)		    
intlist: (nil)
       | INT intlist (INT :: intlist)

optspace: (NONE)
	| AT LPAREN spacedef RPAREN (SOME spacedef)

spacedef: ID LBRACE intlist RBRACE (case ID of 
					"scalar" => Ast.TENSOR [1]
				      | "tensor" => Ast.TENSOR intlist
				      | _ => Ast.TENSOR [] 
					     before error_at_pos 
							IDleft 
							("Unknown space declaration '"^ID
							 ^"'.  Currently supporting only scalar and tensor spaces."))
	 

modelparts: (nil)
	  | modelpart modelparts (modelpart :: modelparts)

modelpart: quantitydef newlines (quantitydef)	  	
	 | submodelinst newlines (submodelinst)
	 | programmatic_stm newlines (Ast.STM programmatic_stm)
	 | outputdef newlines (outputdef)
	 | inputdef newlines (inputdef)
	 | iteratordef newlines (iteratordef)


quantitydef: (*modifiers*) quantitytype ID optdimensions (*precinfoopt*) optassignment opttable(Ast.QUANTITYDEF {modifiers=[], basetype=quantitytype, name=Symbol.symbol ID, precision=NONE, exp=optassignment, settingstable = opttable, dimensions=optdimensions})
(*	   | modifiers PARAMETER ID optdimensions precinfoopt ASSIGN exp opttable (Ast.STM (Ast.DEFINITION (Ast.DEFCONST (Symbol.symbol ID, NONE, exp), PARAMETERleft)) before error_at_pos PARAMETERleft "The parameter keyword has been removed.  Please use inputs for all tunable quantities or set as a constant.")*)
	   | (*modifiers*) RANDOM ID optdimensions (*precinfoopt*) opttable (Ast.QUANTITYDEF {modifiers=[], basetype=Ast.RANDOM_QUANTITY, name=Symbol.symbol ID, precision=NONE, exp=NONE, settingstable = opttable, dimensions=optdimensions})

outputdef: OUTPUT ID optdimensions optassignment opttable optwhen (Ast.OUTPUTDEF {name=Symbol.symbol ID,  
										  quantity=(case optassignment 
											     of NONE => Ast.IFEXP{cond=Ast.APPLY{func=Ast.SYMBOL (Symbol.symbol "objectContains"),
																 args=Ast.TUPLE [Ast.SYMBOL (Symbol.symbol "self"),
																		 Ast.LITERAL(Ast.CONSTSTR ID)]},
														  ift=Ast.SYMBOL (Symbol.symbol ID),
														  iff=Ast.POS(Ast.ERROR (Ast.LITERAL(Ast.CONSTSTR "No quantity or equation found for output")), 
															      OUTPUTleft)}
											      | SOME exp => exp), 
										  dimensions= optdimensions,
										  settings=opttable,
										  condition=optwhen}) 
inputdef: INPUT optmapping ID opttable optspace (Ast.INPUTDEF {name=Symbol.symbol ID,
						      quantity=case optmapping of
								   SOME exp => exp
								 | NONE => Ast.UNIT,
						      dimensions=optspace,
						      settings=opttable})

iteratordef: ITERATOR ID (*optassignment*) opttable (Ast.ITERATORDEF {name=Symbol.symbol ID,
								      value=NONE,
								      settings=opttable})

optdimensions: (NONE)
	     | LBRACE someidslist RBRACE (SOME someidslist)

opttable: (NONE)
	| WITH LCBRACE tableentries RCBRACE (SOME (Ast.TABLE tableentries))

quantitytype: (*QUANTITY (Ast.GENERIC_QUANTITY)
	 |*) STATE (Ast.STATE_QUANTITY)

equationsdef: EQUATION equation (Ast.EQUATIONS ([equation]))
(*	    | EQUATION (Ast.EQUATIONS nil before error_at_pos EQUATIONleft "EQUATION keyword must be followed by an expression. Use an EQUATIONS block to define more than one equation.")*)
	    | EQUATIONS newlines equations END (Ast.EQUATIONS(equations))

equations: (nil)
	 | equation newlines equations (equation :: equations)

equation: exp EQARROW exp (Ast.MATHFUNCTION (exp1, exp2))
	| exp ASSIGN exp optwhen (Ast.EQUATION (exp1, exp2, optwhen))
	| ID WHEN exp (Ast.EVENT (Symbol.symbol ID, exp))


ticks: TICK (1)
     | TICK ticks (1 + ticks)

submodelinst: SUBMODEL ID ID (*optdimensions*) optspace opttable (Ast.SUBMODELINST ({class=Symbol.symbol ID1, name=Symbol.symbol ID2, opttable=opttable, optdimensions=optspace}))


optassignment: (NONE)
	     | ASSIGN exp (SOME exp)

optmapping: (NONE)
	  (*| exp ASSIGN (SOME exp)*)

string_content: STRING_EXP LPAREN exp RPAREN (exp)
	      | STRING_EXP LCBRACE conditions RCBRACE (conditions)
	      | STRING_EXP ID (Ast.SYMBOL (Symbol.symbol ID))
	      | STRING_CHARS (Ast.LITERAL (Ast.CONSTSTR (StdFun.fromString STRING_CHARS)))

string_contents: ([])
	       | string_contents string_content (string_content :: string_contents)

string: BEGIN_STRING string_contents END_STRING 
		(case string_contents of
		     [] => Ast.LITERAL (Ast.CONSTSTR "")
		   | [Ast.LITERAL (Ast.CONSTSTR s)] => Ast.LITERAL (Ast.CONSTSTR s)
		   | _ => Ast.STRINGEXP (List.rev string_contents))
     (* | BEGIN_STRING END_STRING (Ast.LITERAL (Ast.CONSTSTR ""))*)

action: exp (Ast.EXP exp)
      | IMPORT string 
	       (case string of
		    Ast.LITERAL (Ast.CONSTSTR s) => Ast.IMPORT s
		  | _ => raise StubbedOut)
      | exp ASSIGN exp (Ast.ASSIGN (exp1, exp2))
	(*
      | IF exp THEN stms elsechain (Ast.COND {cond=exp, ift=stms, iff=elsechain})
      | WHILE exp DO stms END (Ast.WHILE {cond=exp, stms=stms})
      | FOREACH ID IN exp DO stms END(Ast.FOR {var=Symbol.symbol ID, collection=exp, stms=stms})
      | exp SATISFIES exp (Ast.EXP(Ast.SATISFIES {class=exp1, interface=exp2}))
      | OPEN exp (Ast.OPEN (exp))
	 *)

exp: lambda (lambda)





lambda: lambdaapp (lambdaapp)
	(* | ERROR lambda (Ast.POS(Ast.ERROR lambda, ERRORleft))*)
	 | lambda AND lambda (Ast.POS(Ast.AND [lambda1, lambda2], ANDleft))
	 | lambda OR lambda (Ast.POS(Ast.OR [lambda1, lambda2], ORleft))
	 (*| FORALL ID IN lambda SUCHTHAT lambda  (Ast.FORALL {var=Symbol.symbol ID, collection=lambda1, test=lambda2})
	 | EXISTS ID IN lambda SUCHTHAT lambda  (Ast.EXISTS {var=Symbol.symbol ID, collection=lambda1, test=lambda2})
	 | LET ID ASSIGN lambda IN lambda END (Ast.LET (Symbol.symbol ID, lambda1, lambda2))
	 | RULEMATCH lambda ARROW lambda (Ast.RULEMATCH{find=lambda1, conds=Ast.LITERAL(Ast.CONSTBOOL true), replace=lambda2})
	 | RULEMATCH lambda WHERE lambda ARROW lambda (Ast.RULEMATCH{find=lambda1, conds=lambda2, replace=lambda3})*)

lambdalist : lambda COMMA lambda ([lambda1, lambda2])
	   | lambda COMMA lambdalist (lambda :: lambdalist)

lambdaapp : lambdaapp aexp (Ast.POS(Ast.APPLY {func=lambdaapp, 
						   args=case aexp of Ast.TUPLE _ => aexp 
								   | Ast.UNIT => aexp
								   | _ => Ast.TUPLE [aexp]}, 
					lambdaappleft))
	  | lambdaapp PERIOD ID (Ast.SEND {message=Symbol.symbol ID, object=lambdaapp})
	  | lambdaapp PERIOD CLASS (Ast.SEND {message=Symbol.symbol "class", object=lambdaapp})
	  | aexp (aexp)
	  | LF ID aexp (Ast.LIBFUN (Symbol.symbol ID, aexp))
	  | lambdaapp PLUS lambdaapp (callfun("operator_add", [lambdaapp1, lambdaapp2]))
	  | lambdaapp MINUS lambdaapp (callfun("operator_subtract", [lambdaapp1, lambdaapp2]))
	  | lambdaapp STAR lambdaapp (callfun("operator_multiply", [lambdaapp1, lambdaapp2]))
	  | lambdaapp SLASH lambdaapp (callfun("operator_divide", [lambdaapp1, lambdaapp2]))
	  | lambdaapp CARROT lambdaapp (callfun("power", [lambdaapp1, lambdaapp2]))
	  | lambdaapp PERCENT lambdaapp (callfun("operator_modulus", [lambdaapp1, lambdaapp2]))
	  | lambdaapp LT lambdaapp (callfun("operator_lt", [lambdaapp1, lambdaapp2]))
	  | lambdaapp LEQUAL lambdaapp (callfun("operator_le", [lambdaapp1, lambdaapp2]))
	  | lambdaapp GT lambdaapp (callfun("operator_gt", [lambdaapp1, lambdaapp2]))
	  | lambdaapp GEQUAL lambdaapp (callfun("operator_ge", [lambdaapp1, lambdaapp2]))
	  | lambdaapp EQ lambdaapp (callfun("operator_eq", [lambdaapp1, lambdaapp2]))
	  | lambdaapp NEQ lambdaapp (callfun("operator_ne", [lambdaapp1, lambdaapp2]))
	  | MINUS lambdaapp %prec UMINUS(callfun("operator_neg", [lambdaapp]))
	  | lambdaapp ELLIPSIS lambdaapp (callfun("operator_tabulate", [lambdaapp1, lambdaapp2]))
	  | lambdaapp ticks (callfun("operator_deriv", [Ast.LITERAL(Ast.CONSTREAL (Real.fromInt ticks)), lambdaapp]))
	  | aexp COLON aexp COLON aexp (callfun ("operator_tabulate", [aexp1, aexp2, aexp3]))
	  | aexp COLON aexp (callfun ("operator_tabulate", [aexp1, aexp2]))

conditions: lambda WHEN lambda COMMA conditions 
	    (Ast.IFEXP {cond=lambda2, ift=lambda1, iff=conditions})
	  | lambda OTHERWISE (lambda)

aexp: REAL (Ast.LITERAL(Ast.CONSTREAL REAL))
    | INT (Ast.LITERAL(Ast.CONSTREAL (Real.fromInt INT)))
    | string (string)
    | AMPERSAND ID COLON ID optspace (Ast.FILEREF({file=Symbol.symbol ID1, entry=Symbol.symbol ID2}, optspace))
    (*| AT LPAREN spacedef COMMA lambda RPAREN (lambda)*)
    | UNDERSCORE (Ast.WILDCARD)
   (* | PATTERN (Ast.APPLY{func=Ast.SEND{message=Symbol.symbol "new", object=Ast.SYMBOL (Symbol.symbol "Pattern")},
			 args=Ast.TUPLE [Ast.LITERAL(Ast.CONSTSTR PATTERN)]})*)
    | HEX (Ast.LITERAL(Ast.CONSTBINARY HEX))
    | OCT (Ast.LITERAL(Ast.CONSTBINARY OCT))
    | BIN (Ast.LITERAL(Ast.CONSTBINARY BIN))
    | TRUE (Ast.LITERAL(Ast.CONSTBOOL true))
    | FALSE (Ast.LITERAL(Ast.CONSTBOOL false))
    | UNDEFINED (Ast.UNDEFINED)
    | LPAREN lambda RPAREN (lambda)
    | LPAREN RPAREN (Ast.UNIT)
    | LPAREN lambdalist RPAREN (Ast.TUPLE lambdalist)
    | ID (Ast.SYMBOL (Symbol.symbol ID))
    (*| LPAREN LAMBDAFUN LPAREN idlist RPAREN ASSIGN lambda RPAREN (Ast.LAMBDA {args=idlist, body=lambda})*)
    (*| LBRACE lambda forgenerator RBRACE (Ast.FORGENERATOR (forgenerator, lambda))*)
    | LBRACE lambdapatternlist RBRACE (Ast.VECTOR lambdapatternlist)
    (*| LBRACE lambdapattern RBRACE (Ast.VECTOR [lambdapattern])*)
    (*| LBRACE RBRACE (Ast.VECTOR [])*)
    | LCBRACE tableentries RCBRACE (Ast.TABLE tableentries)
    | LCBRACE conditions RCBRACE (conditions)
    (*| TYPE typ (Ast.TYPEEXP typ)*)
    (*| ASSERT lambda (Ast.ASSERTION lambda)
    | DOLLAR ID (Ast.APPLY{func=Ast.SEND{message=Symbol.symbol "new", object=Ast.SYMBOL (Symbol.symbol "Symbol")},
			   args=Ast.TUPLE [Ast.LITERAL(Ast.CONSTSTR ID)]})
    | DOLLAR DOLLAR ID (Ast.APPLY{func=Ast.SEND{message=Symbol.symbol "new", object=Ast.SYMBOL (Symbol.symbol "SymbolPattern")},
				  args=Ast.TUPLE [Ast.LITERAL(Ast.CONSTSTR ID)]})*)

lambdapatternlist: (nil)
		 | lambdapattern (lambdapattern :: nil)
		 | lambdapattern COMMA lambdapatternlist (lambdapattern :: lambdapatternlist)

lambdapattern: lambda (lambda)
	     | ID ASSIGN lambda (Ast.NAMEDPATTERN (Symbol.symbol ID, lambda))

tableentries: (*(nil)
	     | *)tableentry (tableentry::nil)
	     | tableentry COMMA tableentries (tableentry :: tableentries)

tableentry: ID ((Symbol.symbol ID, Ast.LITERAL(Ast.CONSTBOOL true)))
	  | ID ASSIGN lambda ((Symbol.symbol ID, lambda))

optwhen: (NONE)
    | WHEN lambda (SOME lambda)


idlist :  (nil)
       | someidslist (someidslist)

someidslist: ID ([Symbol.symbol ID])
	   | ID COMMA someidslist (Symbol.symbol ID :: someidslist)

newlines: NEWLINE ()
	| newlines NEWLINE ()

