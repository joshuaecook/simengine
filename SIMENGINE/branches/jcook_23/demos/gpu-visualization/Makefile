# This makefile handles compiling high-performance C code generated by
# simEngine into a shared library object which may be embedded in an
# end-user application. It is invoked by SIMEX when compiling models
# in MATLAB or GNU octave.
#
# The product of compilation is a shared library object called
# 'libsimengine.so'. Additionally, a 'grind_simEngine' executable may
# be produced which links to the shared library and can be used to
# exercise or inspect the simulation, e.g. with valgrind or gdb.
#
# This makefile will automatically invoke GNU octave to regenerate the
# C code if the model definition or the simEngine compiler have been
# touched.
#
# Copyright 2009 Simatra Modeling Technologies, L.L.C.
# For more information, please visit http://www.simatratechnologies.com

base = /home/jcook/SourceCode/simEngine/branches/clebsack_6/local-install/
include $(base)include/common.make


CUDA_SDK_PATH ?= /opt64/NVIDIA_CUDA_SDK
CUDA_INCLUDES += -I$(CUDA_SDK_PATH)/common/inc  
CUDA_LDFLAGS += -L$(CUDA_SDK_PATH)/lib -L$(CUDA_SDK_PATH)/common/lib/$(OSLOWER) 
ifneq ($(ARCH64),) 
CUDA_LDFLAGS := -L$(CUDA_SDK_PATH)/lib64 -L$(CUDA_SDK_PATH)/common/lib64/$(OSLOWER) $(CUDA_LDFLAGS) 
endif 
CUDA_LDLIBS += -lcutil 





# The name of the model must be specified when invoking make.
MODEL=stg_spiker.dsl
ifeq ($(MODEL),)
$(error A model name must be specified. Invoke make with 'MODEL=mymodel')
endif
DSL_MODEL = $(basename $(notdir $(MODEL)))

# The total number of models to be simulated.
NUM_MODELS ?= 100
# The hardware platform: one of {CPU, OPENMP, GPU}
TARGET ?= GPU
# The storage class for simulation data: one of {float, double}
SIMENGINE_STORAGE ?= float
# If non-empty, instructs the compiler to produce additional debugging
# information.
DEBUG ?= 1
# If non-empty, instructs the compiler to produce additional profiling
# information.
PROFILE ?=
# If non-empty, compiles the simulation in hardware emulation mode.
# Only meaningful when TARGET=GPU.
EMULATE ?=

INCLUDES := -I$(base)include
COMMON = -fPIC -fopenmp
CPPFLAGS := -DNUM_MODELS=$(NUM_MODELS) -DTARGET_$(TARGET) -DSIMENGINE_STORAGE_$(SIMENGINE_STORAGE)
CFLAGS = $(COMMON) $(INCLUDES)
CXXFLAGS = $(COMMON) $(INCLUDES)

CXXWARNINGS = -W -Wall -Wimplicit -Wswitch -Wformat -Wchar-subscripts \
	-Wparentheses -Wmultichar -Wtrigraphs -Wpointer-arith -Wcast-align \
	-Wreturn-type -Wno-unused-function
CWARNINGS = -Wstrict-prototypes -Wmissing-prototypes \
	-Wmissing-declarations -Wnested-externs -Wmain $(CXXWARNINGS)

CXXFLAGS += $(CXXWARNINGS)
CFLAGS += $(CWARNINGS)


LDFLAGS = -L$(base)lib 
LDLIBS = -lsolvers -ldl -lm -lgomp

ifeq ($(TARGET),GPU)
PTXASFLAGS = -v
SMVERSION = -arch=sm_13
NVCCFLAGS = $(SMVERSION) --compiler-options "$(COMMON) $(CXXWARNINGS)" --ptxas-options "$(PTXASFLAGS)" $(INCLUDES)
INCLUDES += $(CUDA_INCLUDES)
LDFLAGS += $(CUDA_LDFLAGS)
LDLIBS += $(CUDA_LDLIBS)

ifneq ($(EMULATE),)
	NVCCFLAGS += -deviceemu
	CXXFLAGS += -D__DEVICE_EMULATION__
	CFLAGS += -D__DEVICE_EMULATION__
endif
endif

ifneq ($(DEBUG),)
	COMMON += -g
	CFLAGS += -gdwarf-2
	NVCCFLAGS += -D_DEBUG
else
	COMMON += -O2
	NVCCFLAGS += --compiler-options -fno-strict-aliasing
	CXXFLAGS += -fno-strict-aliasing
	CFLAGS += -fno-strict-aliasing
endif

GLLIBS = -lGL -lGLU -lX11 -lXi -lXmu
GLUTLIBS = -lglut

# ---

.PREFIXES:

.PHONY: all clean remake grind real-clean
all: libsimengine.so cuda_glui

clean:
	$(RM) $(DSL_MODEL)_parallel.o libsimengine.so cuda_glui cuda_glui.o

real-clean: clean
	$(RM) $(DSL_MODEL)*.c $(DSL_MODEL)*.m $(DSL_MODEL)*.cu

remake: clean all

grind: clean libsimengine.so grind_simEngine
	$(GRIND) ./grind_simEngine

grind_simEngine: grind_simEngine.o $(base)share/simEngine/grind_simEngine.cpp
	$(LINK.cpp) $(LDFLAGS) -o $@ $< $(LDLIBS)

cuda_glui: CPPFLAGS += -DLIBSIMENGINE=$(realpath libsimengine.so)
cuda_glui: cuda_glui.o libsimengine.so $(DSL_MODEL).h simengine.h
	$(LINK.cpp) $(LDFLAGS) -o $@ $< $(LDLIBS) $(GLLIBS) $(GLUTLIBS)

libsimengine.so: $(DSL_MODEL)_parallel.o
	$(LINK.c) $(LDFLAGS) -shared -Wl,-soname,$@ -o $@ $< $(LDLIBS)

ifeq (GPU,$(TARGET))
$(DSL_MODEL)_parallel.cu: $(DSL_MODEL)_parallel.c
	$(LN) $< $@

$(DSL_MODEL)_parallel.o: override CXX = $(NVCC)
$(DSL_MODEL)_parallel.o: override CXXFLAGS = $(NVCCFLAGS)
$(DSL_MODEL)_parallel.o: $(DSL_MODEL)_parallel.cu
	$(COMPILE.cpp) -o $@ $<
endif

# $(DSL_MODEL)_parallel.c: $(MODEL) bin/simEngine
# 	$(OCTAVE) -q --eval "path('bin',path);simex('$<');"
