# This makefile handles compiling high-performance C code generated by
# simEngine into a shared library object which may be embedded in an
# end-user application. It is invoked by SIMEX when compiling models
# in MATLAB or GNU octave.
#
# The product of compilation is a shared library object called
# 'libsimengine.so'. Additionally, a 'grind_simengine' executable may
# be produced which links to the shared library and can be used to
# exercise or inspect the simulation, e.g. with valgrind or gdb.
#
# This makefile will automatically invoke GNU octave to regenerate the
# C code if the model definition or the simEngine compiler have been
# touched.
#
# Copyright 2009 Simatra Modeling Technologies, L.L.C.
# For more information, please visit http://www.simatratechnologies.com

# The name of the model.
MODEL ?= split_fn
# The total number of models to be simulated.
NUM_MODELS ?= 1
# The hardware platform: one of {CPU, OPENMP, GPU}
TARGET ?= CPU
# The storage class for simulation data: one of {float, double}
SIMENGINE_STORAGE ?= double
# If non-empty, instructs the compiler to produce additional debugging
# information.
DEBUG ?=
# If non-empty, instructs the compiler to produce additional profiling
# information.
PROFILE ?=
# If non-empty, compiles the simulation in hardware emulation mode.
# Only meaningful when TARGET=GPU.
EMULATE ?=

CC := gcc
GRIND := valgrind
# Inspects for presence of GNU octave; may be overridden on command line
OCTAVE ?= $(shell which octave 2>/dev/null)
LINK := g++

INCLUDES := -Iinclude
COMMON = -W -Wall -fPIC
CPPFLAGS := -DNUM_MODELS=$(NUM_MODELS) -DTARGET_$(TARGET) -DSIMENGINE_STORAGE_$(SIMENGINE_STORAGE)
CFLAGS = $(COMMON) $(INCLUDES)
CXXFLAGS = $(COMMON) $(INCLUDES)

LDFLAGS = -Llib 
LDLIBS = -lsolvers -ldl -lm

ifeq ($(TARGET),GPU)
NVCC ?= $(shell which nvcc 2>/dev/null)
PTXASFLAGS = -v
NVCCFLAGS = -arch=sm_13 --compiler-options "$(COMMON)" --ptxas-options "$(PTXASFLAGS)" $(INCLUDES)
INCLUDES += -I/usr/local/cuda/include -I/opt64/NVIDIA_CUDA_SDK/common/inc
LDFLAGS += -L/usr/local/cuda/lib -L/opt64/NVIDIA_CUDA_SDK/lib -L/opt64/NVIDIA_CUDA_SDK/common/lib/linux
LDLIBS += -lcudart -lcutil
ifneq ($(EMULATE),)
	NVCCFLAGS += -deviceemu
	CXXFLAGS += -D__DEVICE_EMULATION__
	CFLAGS += -D__DEVICE_EMULATION__
endif
endif

ifneq ($(DEBUG),)
	COMMON += -g
	CFLAGS += -gdwarf-2
	NVCCFLAGS += -D_DEBUG
else
	COMMON += -O2
	NVCCFLAGS += --compiler-options -fno-strict-aliasing
	CXXFLAGS += -fno-strict-aliasing
	CFLAGS += -fno-strict-aliasing
endif


# ---

.PHONY: all clean remake grind real-clean
all: libsimengine.so

clean:
	$(RM) $(MODEL)_parallel.o libsimengine.so grind_simengine

real-clean: clean
	$(RM) $(MODEL)*.c $(MODEL).m $(MODEL)*.cu

remake: clean all

grind: libsimengine.so grind_simengine
	$(GRIND) ./grind_simengine

libsimengine.so: $(MODEL)_parallel.o
	$(LINK.c) -shared -Wl,-soname,libsimengine.so -o libsimengine.so $< $(LDLIBS)

ifeq ($(TARGET),GPU)
$(MODEL)_parallel.cu: $(MODEL)_parallel.c
	cp $< $@

$(MODEL)_parallel.o: override CXX = $(NVCC)
$(MODEL)_parallel.o: override CXXFLAGS = $(NVCCFLAGS)
$(MODEL)_parallel.o: $(MODEL)_parallel.cu
	$(COMPILE.cpp) -o $@ $<
endif

$(MODEL)_parallel.c: examples/$(MODEL).dsl bin/simEngine
	$(OCTAVE) -q --eval "path('bin',path);simex('$<');"