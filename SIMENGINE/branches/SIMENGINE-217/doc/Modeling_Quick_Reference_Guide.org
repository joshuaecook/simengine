DSL Modeling Quick Reference
# See [[http://orgmode.org/manual/]] for information on how to edit this
# file in Emacs
#
#+TITLE:     DSL Modeling Quick Reference Guide
#+AUTHOR:    Simatra Modeling Technologies
#+DATE:      2009-08-31 Mon
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:t d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS:   author:nil timestamp:nil
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 

* Example Model
  A model must have the same name as the file in which it is defined,
  e.g. "Lorenz.dsl".
  
#+BEGIN_SRC dsl
  model (x, y, z) = Lorenz (sigma, rho, Beta)
    // The Lorenz Attractor
    state x = 1E-3
    state y = 1
    state z = 1.05

    input sigma with {default=10}
    input rho with {default=28}
    input Beta with {default=8/3}

    equations
      x' = sigma * (y - x)
      y' = x * (rho - z) - y
      z' = x * y - Beta * z
    end

    solver = forwardeuler
  end
#+END_SRC
* Inputs
  Define default input values with the =input= keyword and the
  =default= entry in a table.  If no default value is given, an input
  value will be required when the model is instantiated.

#+BEGIN_SRC dsl
  input I with {default=2}
#+END_SRC
* Outputs
  Outputs defined in the model declaration line are automatically
  assigned to model quantities of the same name.

  The =output= keyword is used to alias or group output quantities. Limit
  the frequency of output data with the =condition= entry in a table.

#+BEGIN_SRC dsl
  output Y1 = y
  output OUT = (x, y, z)
  output EVENT = z with {condition = z > 0}
#+END_SRC
* States
  Define model states and their initial values with the =state= keyword.

#+BEGIN_SRC dsl
  state X = 0
#+END_SRC
* Constants
#+BEGIN_SRC dsl
  constant PI = 3.14
#+END_SRC
* Equations
  Define single equations with the =equation= keyword. Use an
  =equations= block to define many equations at once. Differential
  equations are declared with a ' suffix.

#+BEGIN_SRC dsl
  equation x' = sigma * (y - x)
  equations
    y' = x * (rho - z) - y
    z' = x * y - Beta * z
  end
#+END_SRC
* Solvers
  Select a numerical solver by setting the =solver= model
  variable. Set the solver attributes with an optional table.

#+BEGIN_SRC dsl
  solver = ode45 with {dt=0.1, abstol=1e-6, reltol=1e-3, max_t=100}
#+END_SRC

  Available solvers: =forwardeuler=,
  =rk4=, =ode23=,
  =ode45=, & =cvode=.

#+CAPTION: Solver Attributes
  | time      | =dt= =min_t= =max_t= |
  | tolerance | =abstol= =reltol=    |
* Importing
#+BEGIN_SRC dsl
  import "mymodel.dsl"
#+END_SRC
* Submodels
  Declare nested model instances with the =submdodel=
  keyword. Specify input values to the instance with an optional table.

#+BEGIN_SRC dsl
  import "MySubModel.dsl"
  submodel MySubModel msmodel with {input1=1.0, input2=2.0}
#+END_SRC

  Instance inputs and outputs may also be accessed by name via dot
  notation:

#+BEGIN_SRC dsl
  modelA.inputA = modelB.outputB
  modelB.inputB = modelA.outputA
#+END_SRC
* Comments
  Single-line comments begin with =//= and continue to the end of
  the line. Multi-line comments begin with =/*= and end
  with =*/=. Multi-line comments may not be nested.
* Model Simulation with SIMEX in Matlab
  =M= = =SIMEX(MODEL)= \\
  Compiles a model and returns a model description structure. =MODEL=
  is the name of the DSL file containing the model declaration.


  =[OUT Y1 T1]= = =SIMEX(MODEL, TIME, INPUTS, Y0, ...)= \\
  Compiles and executes a model and returns a model output structure, a matrix of
  final states, and a vector of final times. =TIME= is a scalar
  specifying final time or a 2-element array specifying start and end
  times. =INPUTS= is a structure containing named model input
  values. =Y0= is a matrix of initial state values.

#+CAPTION: Additional SIMEX Options
  | option      | value                           |
  |-------------+---------------------------------|
  | precision   | =-double= =-single= =-float=    |
  | target      | =-cpu= =-parallel-cpu= =-gpu=   |
  | compilation | =-dontrecompile=                |
  | etc.        | =-debug= =-profile= =-emulate=  |

* Simulation Analysis Tools

* Plotting with SIMPLOT

 =SIMPLOT(STRUCTURED_OUTPUT)= \\
 Using similar syntax as the plot command, =SIMPLOT= displays the structured time-value pair
 from =SIMEX=.

#+BEGIN_SRC dsl
o = simex('mymodel.dsl', 100, '-cpu', '-double')
simplot(o)
simplot(o.V)
simplot(o.V, 'r+')
simplot(o.V, 'r+', 1:10, (1:10)^2)
#+END_SRC dsl

* Sweeping Input Signals with SIMSWEEP

  =[OUT Y1 T1]= = =SIMSWEEP(MODEL, TIME, ...)= \\
  Provides a convenient interfaces for generating multiple simulations through
  a sweep of an input set.  Running =SIMSWEEP= without options will bring up
  a helpful GUI to guide the simulation of an input sweep.

* Sensitivity Analysis with SIMSENSITIVITY
  =OUT = SIMSENSITIVITY(MODEL, TIME)= \\

Analyze the effects of input or state initial value changes on outputs.

#+CAPTION: Additional SIMSENSITIVITY Options
  | option          | value                                                   |
  |-----------------+---------------------------------------------------------|
  | /               | <                                                       |
  | =-precision=    | 'single' or 'double'                                    |
  | =-emulation=    | =true= or =false=                                       |
  | =-inputs=       | an input structure                                      |
  | =-states=       | an initial state matrix                                 |
  | =-perturbation= | the perturbation amount; default is =1=, meaning +/- 1% |

