* Programming in DIESEL

DIESEL is not just a model description language, it is also a feature
rich *programming language*.  Available programming constructs include
functions, loops, if conditions, and vectors.  These features come in
handy when constructing complex models.

** Comments

Textual comments may be placed throughout diesel files.  The contents
of the comment are ignored by simEngine, as if the comment itself did
not exist.

Single line comments may be denoted using a double forward slash (=//=).
All text between the double forward slash and the end of the line is
ignored.

More free form comments may be denoted using =/*= and =*/= as delimiters.

Examples of valid comments are

<src lang="dsl">
// this is a comment

equation x = 1 // this is a comment after an equation

/* this is a
multiple line
comment */

equation x = /*this doesn't effect the equation at all*/ 1
</src>

** Statements

All commands issued in DIESEL are processed as a sequence of
*statements*.  A statement may define a modeling or programming
construct or it may perform some action.

Definitions that create a new named construct have a scope restricted
to subsequent instructions within an existing scope framework.  That
is, you may not reference a definition before it occurs and you may
not reference a definition that is *encapsulated* within another scope.
This is revisited in more detail below.

A distinction is made between model construction statements (like
state definitions) and general purpose statements (like function
definitions).  While general purpose statements may be used inside and
outside of a model definition, model construction statements may *only*
be used inside of a model definition.

** Functions

A *function* is a parameterized sequence of statements that may be
executed by calling the function.

A function consists of a *function header* followed by a sequence of
statements and a closing **end**.  The return value of the function is the
result of the final statement.

An example of a function that computes the least-common-multiple of
two numbers is:

<src lang="dsl">
function add(x, y)
  var lcm = min(x,y)
  var found = false

  while lcm > 1 and not found do
    if x \% lcm == 0 and y \% lcm == 0 then
      found = 1
    else
      lcm = lcm - 1
    end
  end

  lcm
end
</src>

For simple function with a body that is one expression, a shorthand
syntax is available.  A function that adds two numbers would look like

<src lang="dsl">
function adder(x,y) = x + y
</src>


** If Statements

An if statement only executes a sequence of statements if a condition
is met.  The condition takes the form of an expression that resolves
to a boolean value.  An example is

<src lang="dsl">
if x > 3 then
  y = x
end
</src>

The condition is any valid expression that is placed between the
**if** and the **then** keywords.  The body is a sequence of
statements between the **then** and the **end**.

An if statement may also have an optional **else** body and multiple
optional **elseif** bodies.  Examples include

<src lang="dsl">
if x > 3 then
  y = x
else
  y = 3
end

if x == 0 then
  y = -y
  z = true
elseif x == 1 then
  z = y < 0
  y = 0
else
  y = x
  z = false
end
</src>

The condition expressions in these are executed in order.  If one
matches, the corresponding statements are executed and no subsequent
conditions are evaluated.  If all conditions resolve to **false**, the
**else** body is executed if it is defined.

** Constants

A constant is a named quantity with an immutable value.  Once
declared, the value may not change.  A new constant (or other
definition) with the same name may be subsequently declared, but this
is a new definition that eclipses the visibility of the constant, not
a reassignment of the value.

A constant is declared with the following syntax

<src lang="dsl">
constant pi = 3.1415926
</src>

** Variable Definitions

A variable is a named quantity with a mutable value; that is, the
value may be changed after definition.  Subsequent assignments (using
the **=** operator) will update the value of the variable.  Like
constants, subsequent definitions will eclipse the visibility.

An initial value at the time of definition is optional.  If one is not
specified, a special value **undefined** is automatically assigned.  If
**undefined** is passed as an argument to a function or used in an
operation, this condition causes an error message to be generated.

** Loops

A *loop* is a programming construct to execute a sequence of statements
repeatedly.  A *foreach loop* is used to iterate across a range of
values or a collection, whereas a *while loop* is used to iterate until
a condition is no longer true.

*** Foreach Loops

A *foreach loop* is used to execute a sequence of statements for each
value in a range of values or a collection.  The foreach loop assigns
the value at each iteration to a named quantity, so that it may be
read by the statements in the loop body.

An example of a foreach loop is

<src lang="dsl">
var sum = 0
foreach x in 1:10 do
  sum = sum + x
end
</src>

The expression that is included between the **in** and **do** keywords must
resolve to a vector.  The =1:10= notation denotes a vector of the
integer values 1 through 10.  Vectors are covered in more detail in
the vectors section.

Another example is

<src lang="dsl">
// find the next largest prime after 100
function isprime (n)
  prime = true
  for x in 2:((n/2).floor()) do
    if n % x == 0 then
      prime = false
    end
  end

  prime
end
</src>

*** While Loops

A *while loop* is used to execute a sequence of statements repeatedly
until a condition expression no longer resolves to true.  The
condition expression is evaluated once before the body of the loop is
ever executed.  If the condition is initially **false**, the body of the
loop will never be executed and the loop will be skipped over.

An example while loop is included below.

<src lang="dsl">
var x = 100
while not (isprime x) do
  x = x + 1
end
// it is now in x
</src>

** Vectors

DIESEL contains a feature-rich vector data structure.  While there
is no vector support in equations as of simEngine 1.0, vectors are
useful for a variety of other tasks.

Vectors may contain any valid data.  Their contents may be declared
explicitly, using square brackets (=[= =]=).  They may be constructed by
modification using vector methods like **push_back** and **push_front**.  They
may be constructed from other vectors using a *vector predicate*.


*** Vector Predicates
Vectors may be generated using a concise notation known as a *vector
predicate*.  A vector predicate consists of a generating expression
and a sequence of one or more iteration descriptors.  An iteration
descriptor consists of a collection of elements to iterate over, an
identifier bound sequentially to each element, and an optional
condition which filters elements from the collection.

Example vector predicates follow

<src lang="dsl">
[x*x foreach x in 1..10 when x % 2 == 0]
// produces [4, 16, 36, 64, 100]
[x foreach x in 1..10 when isprime x]
// produces [2, 3, 5, 7]
[x + y foreach x in 1..3, foreach y in 2..4]
//produces [3, 4, 5, 4, 5, 6, 5, 6, 7]
</src>



** Conditional Expressions

A *conditional expression* is a type of expression that selects a value
based upon a sequence of boolean conditions.  While similar to an if
statement, a conditional expression differs in that it returns a value
instead of executing statements.

A conditional expression falls inside of curly-braces (={= =}=), includes
a sequence of comma seperated **when** clauses, and *always* ends in an
**otherwise** clause.

An example conditional expression to select the largest of 2 variables
=x= and =y= is

<src lang="dsl">
equation largest = {x when x > y, y otherwise}
</src>

An example conditional expression to perform boundry saturation on an
expression is

<src lang="dsl">
equation v = {0 when x < 0, 1 when x > 1, x otherwise}
</src>


** Tables

Tables are a data structure consisting of key and value pairs.  An
example table is

<src lang="dsl">
{x=1, y=2, z=3}
</src>

If a value is omitted, the value is assumed to be **true**.

Tables are used in a number of places, including specifying inputs to
submodel instances and specifying properties of simulation quantities.
